<?php 
$user =& JFactory::getUser();
$userId= $user->get( 'id' );

require_once JPATH_PLUGINS . '/user/cmavatar/helper.php';

$avatar = PlgUserCMAvatarHelper::getAvatar($userId);
public function onContentPrepareForm($form, $data)
	{
		if (!($form instanceof JForm))
		{
			throw new RuntimeException(JText::_('JERROR_NOT_A_FORM'));
			return false;
		}
		// Only run in front-end.
		if (!JFactory::getApplication()->isSite())
		{
			return true;
		}
		// Check we are manipulating a valid form.
		$name = $form->getName();
		if (!in_array($name, array('com_admin.profile', 'com_users.user', 'com_users.profile', 'com_users.registration')))
		{
			return true;
		}
		$folder = $this->params->get('folder', '');
		$avatarFolder = JPATH_ROOT . '/' . $folder;
		// If the avatar folder doesn't exist, we don't display the fields.
		if (!JFolder::exists($avatarFolder))
		{
			return true;
		}
		$layout = JFactory::getApplication()->input->get('layout', 'default');
		if ($layout != 'default' || ($layout == 'default' && $this->params->get('display_avatar_in_profile', 0) == 1))
		{
			JForm::addFormPath(__DIR__ . '/profiles');
			$form->loadFile('profile', false);
		}
		return true;
	}
	/**
	 * Save user profile data.
	 *
	 * @param   array    $data    Entered user data
	 * @param   boolean  $isNew   True if this is a new user
	 * @param   boolean  $result  True if saving the user worked
	 * @param   string   $error   Error message
	 *
	 * @return  boolean
	 */
	public function onUserAfterSave($data, $isNew, $result, $error)
	{
		// Only run in front-end.
		if (!JFactory::getApplication()->isSite())
		{
			return true;
		}
		$userId = JArrayHelper::getValue($data, 'id', 0, 'int');
		$folder = $this->params->get('folder', '');
		$avatarFolder = JPATH_ROOT . '/' . $folder;
		// If the avatar folder doesn't exist, we don't do anything.
		if (!JFolder::exists($avatarFolder))
		{
			return false;
		}
		$jinput = JFactory::getApplication()->input;
		$delete = $jinput->get('delete-avatar', '', 'word');
		if ($delete == 'yes')
		{
			$this->deleteAvatar($userId);
			return true;
		}
		if ($result && $userId > 0)
		{
			$files = $jinput->files->get('jform', array(), 'array');
			if (!isset($files['cmavatar']['cmavatar']))
			{
				return false;
			}
			$file = $files['cmavatar']['cmavatar'];
			if (empty($file['name']))
			{
				return true;
			}
			$fileTypes = explode('.', $file['name']);
			if (count($fileTypes) < 2)
			{
				// There seems to be no extension.
				throw new RuntimeException(JText::_('PLG_USER_CMAVATAR_ERROR_FILE_TYPE'));
				return false;
			}
			array_shift($fileTypes);
			// Check if the file has an executable extension.
			$executable = array(
				'php', 'js', 'exe', 'phtml', 'java', 'perl', 'py', 'asp','dll', 'go', 'ade', 'adp', 'bat', 'chm', 'cmd', 'com', 'cpl', 'hta', 'ins', 'isp',
				'jse', 'lib', 'mde', 'msc', 'msp', 'mst', 'pif', 'scr', 'sct', 'shb', 'sys', 'vb', 'vbe', 'vbs', 'vxd', 'wsc', 'wsf', 'wsh'
			);
			$check = array_intersect($fileTypes, $executable);
			if (!empty($check))
			{
				throw new RuntimeException(JText::_('PLG_USER_CMAVATAR_ERROR_FILE_TYPE'));
				return false;
			}
			$fileType = array_pop($fileTypes);
			$allowable = array_map('trim', explode(',', $this->params->get('allowed_extensions')));
			if ($fileType == '' || $fileType == false || (!in_array($fileType, $allowable)))
			{
				throw new RuntimeException(JText::_('PLG_USER_CMAVATAR_ERROR_FILE_TYPE'));
				return false;
			}
			$uploadMaxSize = $this->params->get('max_size', 0) * 1024 * 1024;
			$uploadMaxFileSize = $this->toBytes(ini_get('upload_max_filesize'));
			if (($file['error'] == 1)
				|| ($uploadMaxSize > 0 && $file['size'] > $uploadMaxSize)
				|| ($uploadMaxFileSize > 0 && $file['size'] > $uploadMaxFileSize))
			{
				throw new RuntimeException(JText::_('PLG_USER_CMAVATAR_ERROR_FILE_TOO_LARGE'));
				return false;
			}
			// Make the file name unique.
			$md5String = $userId . $file['name'] . JFactory::getDate();
			$avatarFileName = JFile::makeSafe(md5($md5String));
			if (empty($avatarFileName))
			{
				// No file name after the name was cleaned by JFile::makeSafe.
				throw new RuntimeException(JText::_('PLG_USER_CMAVATAR_ERROR_NO_FILENAME'));
				return false;
			}
			// Check file type
			$info = JImage::getImageFileProperties($file['tmp_name']);
			switch ($info->type)
			{
				case IMAGETYPE_GIF:
					$type		= IMAGETYPE_GIF;
					$extension	= 'gif';
					break;
				case IMAGETYPE_PNG:
					$type		= IMAGETYPE_PNG;
					$extension	= 'png';
					break;
				case IMAGETYPE_JPEG:
				default:
					$type		= IMAGETYPE_JPEG;
					$extension	= 'jpg';
			}
			if ($fileType == '' || $fileType == false || (!in_array($extension, $allowable)))
			{
				throw new RuntimeException(JText::_('PLG_USER_CMAVATAR_ERROR_FILE_TYPE'));
				return false;
			}
			$avatarFileName = $avatarFileName . '.' . $extension;
			$avatarPath = JPath::clean($avatarFolder . '/' . $avatarFileName);
			if (JFile::exists($avatarPath))
			{
				// A file with this name already exists. It is almost impossible.
				throw new RuntimeException(JText::_('PLG_USER_CMAVATAR_ERROR_FILE_EXISTS'));
				return false;
			}
			// Start resizing the file.
			$avatar = new JImage($file['tmp_name']);
			$originalWidth = $avatar->getWidth();
			$originalHeight = $avatar->getHeight();
			$ratio = $originalWidth / $originalHeight;
			$maxWidth = (int) $this->params->get('width', 100);
			$maxHeight = (int) $this->params->get('height', 100);
			// Invalid value in the plugin configuration. Set avatar width to 100.
			if ($maxWidth <= 0)
			{
				$maxWidth = 100;
			}
			if ($maxHeight <= 0)
			{
				$maxHeight = 100;
			}
			if ($originalWidth > $maxWidth)
			{
				$ratio = $originalWidth / $originalHeight;
				$newWidth = $maxWidth;
				$newHeight = $newWidth / $ratio;
				if ($newHeight > $maxHeight)
				{
					$ratio = $newWidth / $newHeight;
					$newHeight = $maxHeight;
					$newWidth = $newHeight * $ratio;
				}
			}
			elseif ($originalHeight > $maxHeight)
			{
				$ratio = $originalWidth / $originalHeight;
				$newHeight = $maxHeight;
				$newWidth = $newHeight * $ratio;
				if ($newWidth > $maxWidth)
				{
					$ratio = $newWidth / $newHeight;
					$newWidth = $maxWidth;
					$newHeight = $newWidth / $ratio;
				}
			}
			else
			{
				$newWidth = $originalWidth;
				$newHeight = $originalHeight;
			}
			$resizedAvatar = $avatar->resize($newWidth, $newHeight, true);
			$resizedAvatar->toFile($avatarPath, $type);
			// Delete current avatar if exists.
			$this->deleteAvatar($userId);
			$db = JFactory::getDbo();
			$query = $db->getQuery(true);
			// Save avatar's file name to database.
			if (!empty($currentAvatar))
			{
				$query->update($db->qn('#__user_profiles'))
					->set($db->qn('profile_value') . ' = ' . $db->q($avatarFileName))
					->where($db->qn('user_id') . ' = ' . $db->q($userId))
					->where($db->qn('profile_key') . ' = ' . $db->quote($this->profileKey));
			}
			else
			{
				$query->insert($db->qn('#__user_profiles'))
					->columns(
						$db->qn(
							array(
								'user_id',
								'profile_key',
								'profile_value',
								'ordering'
							)
						)
					)
					->values(
						$db->q($userId) . ', ' .
						$db->q($this->profileKey) . ', ' .
						$db->q($avatarFileName) . ', ' .
						$db->q('1')
					);
			}
			$db->setQuery($query)->execute();
			// Check for a database error.
			if ($error = $db->getErrorMsg())
			{
				throw new RuntimeException($error);
				return false;
			}
		}
		return true;
	};
echo '<img src="/' . $avatar . '">'
?>
